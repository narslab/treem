range(d1$speed_kph)
m = get_speed_cutpoints(d1,6,test = FALSE)
m
max(d1$speed_kph)
hist(d1$mph)
range(d1$speed_mph)
m = get_speed_cutpoints(d2,6,test = FALSE)
source('D:/Github/treem/bin/R/speed-acceleration-cutpoints-line-specific.R', echo=TRUE)
source('D:/Github/treem/bin/R/speed-acceleration-cutpoints-line-specific.R', echo=TRUE)
source('D:/Github/treem/bin/R/speed-acceleration-cutpoints-line-specific.R', echo=TRUE)
source('D:/Github/treem/bin/R/speed-acceleration-cutpoints-line-specific.R', echo=TRUE)
#necessary library
library(data.table) #fread
library(lubridate)
library(reshape2)
library(dplyr)
library(scales)
library(stringr)
library(tidyr) # spread function
#memory.limit(size=900000) #Windows-specific #JO
# Select the month you want to investigate
YEARLIST = c("20")
MONTHLIST = c("01")
# MONTHLIST = c("01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12")
DISTANCE_FILEPATH = "F:/data/tidy/vehicle-trajectory-computation/"
# DISTANCE_FILEPATH = "../../data/tidy/vehicle-trajectory-computation/"
COMPUTATION_FILEPATH = "F:/data/tidy/"
# COMPUTATION_FILEPATH = "../../data/tidy/"
energy_df = fread("F:/data/raw/energy-consumption-08-20.csv") # Read in energy data
# energy_df = fread("../../data/raw/energy-consumption-08-20.csv") # Read in energy data
d_ridership = fread("F:/data/raw/ridership-2019-2020.csv")# Read in ridership data
# d_ridership = fread("../../data/raw/ridership-2019-2020.csv")# Read in ridership data
NUM_SPEED_BINS = 6
NUM_ACCEL_BINS = 6
#  Read the cutpoints for four lines
# SPEED_CUTS_1 = data.frame(read.csv(paste0("../../data/tidy/speed-19-cutpoints-bins-", NUM_SPEED_BINS, ".csv")))$cutpoints
# SPEED_CUTS_2 = data.frame(read.csv(paste0("../../data/tidy/speed-19-cutpoints-bins-", NUM_SPEED_BINS, ".csv")))$cutpoints
# SPEED_CUTS_3 = data.frame(read.csv(paste0("../../data/tidy/speed-19-cutpoints-bins-", NUM_SPEED_BINS, ".csv")))$cutpoints
# SPEED_CUTS_4 = data.frame(read.csv(paste0("../../data/tidy/speed-19-cutpoints-bins-", NUM_SPEED_BINS, ".csv")))$cutpoints
# ACCEL_CUTS_1 = data.frame(read.csv(paste0("../../data/tidy/acceleration-19-cutpoints-bins-", NUM_ACCEL_BINS, ".csv")))$cutpoints
# ACCEL_CUTS_2 = data.frame(read.csv(paste0("../../data/tidy/acceleration-19-cutpoints-bins-", NUM_ACCEL_BINS, ".csv")))$cutpoints
# ACCEL_CUTS_3 = data.frame(read.csv(paste0("../../data/tidy/acceleration-19-cutpoints-bins-", NUM_ACCEL_BINS, ".csv")))$cutpoints
# ACCEL_CUTS_4 = data.frame(read.csv(paste0("../../data/tidy/acceleration-19-cutpoints-bins-", NUM_ACCEL_BINS, ".csv")))$cutpoints
# Read from Zhuo's hard drive
SPEED_CUTS_1 = data.frame(read.csv(paste0("F:/data/tidy/speed-19-cutpoints-bins-", NUM_SPEED_BINS, ".csv")))$cutpoints
SPEED_CUTS_2 = data.frame(read.csv(paste0("F:/data/tidy/speed-19-cutpoints-bins-", NUM_SPEED_BINS, ".csv")))$cutpoints
SPEED_CUTS_3 = data.frame(read.csv(paste0("F:/data/tidy/speed-19-cutpoints-bins-", NUM_SPEED_BINS, ".csv")))$cutpoints
SPEED_CUTS_4 = data.frame(read.csv(paste0("F:/data/tidy/speed-19-cutpoints-bins-", NUM_SPEED_BINS, ".csv")))$cutpoints
ACCEL_CUTS_1 = data.frame(read.csv(paste0("F:/data/tidy/acceleration-19-cutpoints-bins-", NUM_ACCEL_BINS, ".csv")))$cutpoints
ACCEL_CUTS_2 = data.frame(read.csv(paste0("F:/data/tidy/acceleration-19-cutpoints-bins-", NUM_ACCEL_BINS, ".csv")))$cutpoints
ACCEL_CUTS_3 = data.frame(read.csv(paste0("F:/data/tidy/acceleration-19-cutpoints-bins-", NUM_ACCEL_BINS, ".csv")))$cutpoints
ACCEL_CUTS_4 = data.frame(read.csv(paste0("F:/data/tidy/acceleration-19-cutpoints-bins-", NUM_ACCEL_BINS, ".csv")))$cutpoints
#necessary library
library(data.table) #fread
library(lubridate)
library(reshape2)
library(dplyr)
library(scales)
library(stringr)
library(tidyr) # spread function
#memory.limit(size=900000) #Windows-specific #JO
# Select the month you want to investigate
YEARLIST = c("20")
MONTHLIST = c("01")
# MONTHLIST = c("01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12")
DISTANCE_FILEPATH = "F:/data/tidy/vehicle-trajectory-computation/"
# DISTANCE_FILEPATH = "../../data/tidy/vehicle-trajectory-computation/"
COMPUTATION_FILEPATH = "F:/data/tidy/"
# COMPUTATION_FILEPATH = "../../data/tidy/"
energy_df = fread("F:/data/raw/energy-consumption-08-20.csv") # Read in energy data
# energy_df = fread("../../data/raw/energy-consumption-08-20.csv") # Read in energy data
d_ridership = fread("F:/data/raw/ridership-2019-2020.csv")# Read in ridership data
# d_ridership = fread("../../data/raw/ridership-2019-2020.csv")# Read in ridership data
NUM_SPEED_BINS = 6
NUM_ACCEL_BINS = 6
#  Read the cutpoints for four lines
# SPEED_CUTS_1 = data.frame(read.csv(paste0("../../data/tidy/speed-19-cutpoints-bins-", NUM_SPEED_BINS, ".csv")))$cutpoints
# SPEED_CUTS_2 = data.frame(read.csv(paste0("../../data/tidy/speed-19-cutpoints-bins-", NUM_SPEED_BINS, ".csv")))$cutpoints
# SPEED_CUTS_3 = data.frame(read.csv(paste0("../../data/tidy/speed-19-cutpoints-bins-", NUM_SPEED_BINS, ".csv")))$cutpoints
# SPEED_CUTS_4 = data.frame(read.csv(paste0("../../data/tidy/speed-19-cutpoints-bins-", NUM_SPEED_BINS, ".csv")))$cutpoints
# ACCEL_CUTS_1 = data.frame(read.csv(paste0("../../data/tidy/acceleration-19-cutpoints-bins-", NUM_ACCEL_BINS, ".csv")))$cutpoints
# ACCEL_CUTS_2 = data.frame(read.csv(paste0("../../data/tidy/acceleration-19-cutpoints-bins-", NUM_ACCEL_BINS, ".csv")))$cutpoints
# ACCEL_CUTS_3 = data.frame(read.csv(paste0("../../data/tidy/acceleration-19-cutpoints-bins-", NUM_ACCEL_BINS, ".csv")))$cutpoints
# ACCEL_CUTS_4 = data.frame(read.csv(paste0("../../data/tidy/acceleration-19-cutpoints-bins-", NUM_ACCEL_BINS, ".csv")))$cutpoints
# Read from Zhuo's hard drive
SPEED_CUTS_1 = data.frame(read.csv(paste0("F:/data/tidy/speed-19-cutpoints-bins-", NUM_SPEED_BINS, "1", ".csv")))$cutpoints
SPEED_CUTS_2 = data.frame(read.csv(paste0("F:/data/tidy/speed-19-cutpoints-bins-", NUM_SPEED_BINS, "2", ".csv")))$cutpoints
SPEED_CUTS_3 = data.frame(read.csv(paste0("F:/data/tidy/speed-19-cutpoints-bins-", NUM_SPEED_BINS, "3", ".csv")))$cutpoints
SPEED_CUTS_4 = data.frame(read.csv(paste0("F:/data/tidy/speed-19-cutpoints-bins-", NUM_SPEED_BINS, "4", ".csv")))$cutpoints
ACCEL_CUTS_1 = data.frame(read.csv(paste0("F:/data/tidy/acceleration-19-cutpoints-bins-", NUM_ACCEL_BINS, "1", ".csv")))$cutpoints
ACCEL_CUTS_2 = data.frame(read.csv(paste0("F:/data/tidy/acceleration-19-cutpoints-bins-", NUM_ACCEL_BINS, "2", ".csv")))$cutpoints
ACCEL_CUTS_3 = data.frame(read.csv(paste0("F:/data/tidy/acceleration-19-cutpoints-bins-", NUM_ACCEL_BINS, "3", ".csv")))$cutpoints
ACCEL_CUTS_4 = data.frame(read.csv(paste0("F:/data/tidy/acceleration-19-cutpoints-bins-", NUM_ACCEL_BINS, "4", ".csv")))$cutpoints
#necessary library
library(data.table) #fread
library(lubridate)
library(reshape2)
library(dplyr)
library(scales)
library(stringr)
library(tidyr) # spread function
#memory.limit(size=900000) #Windows-specific #JO
# Select the month you want to investigate
YEARLIST = c("20")
MONTHLIST = c("01")
# MONTHLIST = c("01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12")
DISTANCE_FILEPATH = "F:/data/tidy/vehicle-trajectory-computation/"
# DISTANCE_FILEPATH = "../../data/tidy/vehicle-trajectory-computation/"
COMPUTATION_FILEPATH = "F:/data/tidy/"
# COMPUTATION_FILEPATH = "../../data/tidy/"
energy_df = fread("F:/data/raw/energy-consumption-08-20.csv") # Read in energy data
# energy_df = fread("../../data/raw/energy-consumption-08-20.csv") # Read in energy data
d_ridership = fread("F:/data/raw/ridership-2019-2020.csv")# Read in ridership data
# d_ridership = fread("../../data/raw/ridership-2019-2020.csv")# Read in ridership data
NUM_SPEED_BINS = 6
NUM_ACCEL_BINS = 6
#  Read the cutpoints for four lines
# SPEED_CUTS_1 = data.frame(read.csv(paste0("../../data/tidy/speed-19-cutpoints-bins-", NUM_SPEED_BINS, ".csv")))$cutpoints
# SPEED_CUTS_2 = data.frame(read.csv(paste0("../../data/tidy/speed-19-cutpoints-bins-", NUM_SPEED_BINS, ".csv")))$cutpoints
# SPEED_CUTS_3 = data.frame(read.csv(paste0("../../data/tidy/speed-19-cutpoints-bins-", NUM_SPEED_BINS, ".csv")))$cutpoints
# SPEED_CUTS_4 = data.frame(read.csv(paste0("../../data/tidy/speed-19-cutpoints-bins-", NUM_SPEED_BINS, ".csv")))$cutpoints
# ACCEL_CUTS_1 = data.frame(read.csv(paste0("../../data/tidy/acceleration-19-cutpoints-bins-", NUM_ACCEL_BINS, ".csv")))$cutpoints
# ACCEL_CUTS_2 = data.frame(read.csv(paste0("../../data/tidy/acceleration-19-cutpoints-bins-", NUM_ACCEL_BINS, ".csv")))$cutpoints
# ACCEL_CUTS_3 = data.frame(read.csv(paste0("../../data/tidy/acceleration-19-cutpoints-bins-", NUM_ACCEL_BINS, ".csv")))$cutpoints
# ACCEL_CUTS_4 = data.frame(read.csv(paste0("../../data/tidy/acceleration-19-cutpoints-bins-", NUM_ACCEL_BINS, ".csv")))$cutpoints
# Read from Zhuo's hard drive
SPEED_CUTS_1 = data.frame(read.csv(paste0("F:/data/tidy/speed-19-cutpoints-bins-", NUM_SPEED_BINS, "-1", ".csv")))$cutpoints
SPEED_CUTS_2 = data.frame(read.csv(paste0("F:/data/tidy/speed-19-cutpoints-bins-", NUM_SPEED_BINS, "-2", ".csv")))$cutpoints
SPEED_CUTS_3 = data.frame(read.csv(paste0("F:/data/tidy/speed-19-cutpoints-bins-", NUM_SPEED_BINS, "-3", ".csv")))$cutpoints
SPEED_CUTS_4 = data.frame(read.csv(paste0("F:/data/tidy/speed-19-cutpoints-bins-", NUM_SPEED_BINS, "-4", ".csv")))$cutpoints
ACCEL_CUTS_1 = data.frame(read.csv(paste0("F:/data/tidy/acceleration-19-cutpoints-bins-", NUM_ACCEL_BINS, "-1", ".csv")))$cutpoints
ACCEL_CUTS_2 = data.frame(read.csv(paste0("F:/data/tidy/acceleration-19-cutpoints-bins-", NUM_ACCEL_BINS, "-2", ".csv")))$cutpoints
ACCEL_CUTS_3 = data.frame(read.csv(paste0("F:/data/tidy/acceleration-19-cutpoints-bins-", NUM_ACCEL_BINS, "-3", ".csv")))$cutpoints
ACCEL_CUTS_4 = data.frame(read.csv(paste0("F:/data/tidy/acceleration-19-cutpoints-bins-", NUM_ACCEL_BINS, "-4", ".csv")))$cutpoints
paste0("F:/data/tidy/acceleration-19-cutpoints-bins-", 6, "-2", ".csv")
#necessary library
library(data.table) #fread
library(lubridate)
library(reshape2)
library(dplyr)
library(scales)
library(stringr)
library(tidyr) # spread function
#memory.limit(size=900000) #Windows-specific #JO
# Select the month you want to investigate
YEARLIST = c("20")
MONTHLIST = c("01")
# MONTHLIST = c("01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12")
DISTANCE_FILEPATH = "F:/data/tidy/vehicle-trajectory-computation/"
# DISTANCE_FILEPATH = "../../data/tidy/vehicle-trajectory-computation/"
COMPUTATION_FILEPATH = "F:/data/tidy/"
# COMPUTATION_FILEPATH = "../../data/tidy/"
energy_df = fread("F:/data/raw/energy-consumption-08-20.csv") # Read in energy data
# energy_df = fread("../../data/raw/energy-consumption-08-20.csv") # Read in energy data
d_ridership = fread("F:/data/raw/ridership-2019-2020.csv")# Read in ridership data
# d_ridership = fread("../../data/raw/ridership-2019-2020.csv")# Read in ridership data
NUM_SPEED_BINS = 6
NUM_ACCEL_BINS = 6
#  Read the cutpoints for four lines
# SPEED_CUTS_1 = data.frame(read.csv(paste0("../../data/tidy/speed-19-cutpoints-bins-", NUM_SPEED_BINS, ".csv")))$cutpoints
# SPEED_CUTS_2 = data.frame(read.csv(paste0("../../data/tidy/speed-19-cutpoints-bins-", NUM_SPEED_BINS, ".csv")))$cutpoints
# SPEED_CUTS_3 = data.frame(read.csv(paste0("../../data/tidy/speed-19-cutpoints-bins-", NUM_SPEED_BINS, ".csv")))$cutpoints
# SPEED_CUTS_4 = data.frame(read.csv(paste0("../../data/tidy/speed-19-cutpoints-bins-", NUM_SPEED_BINS, ".csv")))$cutpoints
# ACCEL_CUTS_1 = data.frame(read.csv(paste0("../../data/tidy/acceleration-19-cutpoints-bins-", NUM_ACCEL_BINS, ".csv")))$cutpoints
# ACCEL_CUTS_2 = data.frame(read.csv(paste0("../../data/tidy/acceleration-19-cutpoints-bins-", NUM_ACCEL_BINS, ".csv")))$cutpoints
# ACCEL_CUTS_3 = data.frame(read.csv(paste0("../../data/tidy/acceleration-19-cutpoints-bins-", NUM_ACCEL_BINS, ".csv")))$cutpoints
# ACCEL_CUTS_4 = data.frame(read.csv(paste0("../../data/tidy/acceleration-19-cutpoints-bins-", NUM_ACCEL_BINS, ".csv")))$cutpoints
# Read from Zhuo's hard drive
SPEED_CUTS_1 = data.frame(read.csv(paste0("F:/data/tidy/speed-19-cutpoints-line-specific-bins-", NUM_SPEED_BINS, "-1", ".csv")))$cutpoints
SPEED_CUTS_2 = data.frame(read.csv(paste0("F:/data/tidy/speed-19-cutpoints-line-specific-bins-", NUM_SPEED_BINS, "-2", ".csv")))$cutpoints
SPEED_CUTS_3 = data.frame(read.csv(paste0("F:/data/tidy/speed-19-cutpoints-line-specific-bins-", NUM_SPEED_BINS, "-3", ".csv")))$cutpoints
SPEED_CUTS_4 = data.frame(read.csv(paste0("F:/data/tidy/speed-19-cutpoints-line-specific-bins-", NUM_SPEED_BINS, "-4", ".csv")))$cutpoints
ACCEL_CUTS_1 = data.frame(read.csv(paste0("F:/data/tidy/acceleration-19-cutpoints-line-specific-bins-", NUM_ACCEL_BINS, "-1", ".csv")))$cutpoints
ACCEL_CUTS_2 = data.frame(read.csv(paste0("F:/data/tidy/acceleration-19-cutpoints-line-specific-bins-", NUM_ACCEL_BINS, "-2", ".csv")))$cutpoints
ACCEL_CUTS_3 = data.frame(read.csv(paste0("F:/data/tidy/acceleration-19-cutpoints-line-specific-bins-", NUM_ACCEL_BINS, "-3", ".csv")))$cutpoints
ACCEL_CUTS_4 = data.frame(read.csv(paste0("F:/data/tidy/acceleration-19-cutpoints-line-specific-bins-", NUM_ACCEL_BINS, "-4", ".csv")))$cutpoints
# aggregrate_trajectory_table
line_aggregation = function(year,month){
assign("dg",fread(paste0(DISTANCE_FILEPATH, paste(paste("green", "trajectory", year, month, sep = "-", collapse = ""), ".csv", sep=""))))
assign("dh",fread(paste0(DISTANCE_FILEPATH, paste(paste("heavy", "trajectory", year, month, sep = "-", collapse = ""), ".csv", sep=""))))
dg$lineid = 4
dg = subset(dg, select = c(trxtime, year, month, day, lineid, lat, lon , speed_kph , accel_mps2 , interval_seconds , dist_meters , vehicleid))
dh = subset(dh, select = c(trxtime, year, month, day, lineid, lat, lon , speed_kph , accel_mps2 , interval_seconds , dist_meters , vehicleid))
df = rbind(dg, dh)
remove(dg)
remove(dh)
return(df)
}
df = line_aggregation(YEARLIST,MONTHLIST)
unit_transfer = function(df){
df$hour = hour(df$trxtime)
df$speed_mph = df$speed_kph*0.621371 #kph to mph
df$distance_mile = df$dist_meters*0.000621371 #convert from meters to mile
df$time_hr = df$interval_seconds/3600.0 #convert from seconds to hour
return(df)
}
df = unit_transfer(df)
head(df)
View(df)
paste0("SPEED_CUTS_",1)
# Calculate the speed bins
bin_speeds <- function (dataframe, num_bins, line_number,test = FALSE) {
dataframe = dataframe[lineid == line_number]
dummy_cols = c(paste0("speed_bin_",1:num_bins,"_dummy","_",line_number))
bin_time_cols = c(paste0("speed_bin_",1:num_bins,"_time_hr","_",line_number))
print("Reading speed bins")
cutpoints = paste0("SPEED_CUTS_",line_number)
print(round(cutpoints,2))
for(n in seq(1, num_bins)) {
if(n == 1){
dataframe[, dummy_cols[n] := sapply(speed_mph,  function(x) ifelse (x < cutpoints[n+1], 1, 0))]
}
else if (n == num_bins){
dataframe[, dummy_cols[n] := sapply(speed_mph,  function(x) ifelse (x >= cutpoints[num_bins], 1, 0))]
}
else {
dataframe[, dummy_cols[n] := sapply(speed_mph,  function(x) ifelse (x >= cutpoints[n] & x < cutpoints[n + 1], 1, 0))]
}
}
dataframe[, (bin_time_cols) := lapply(.SD, function(x) x * dataframe$time_hr ), .SDcols = dummy_cols]
if (test) {
print(paste0("Percentage error of summed speed bin times = ",
round(100*(sum(colSums(dataframe %>% select(starts_with("speed_bin_") & ends_with(paste0("_time_hr","_",line_number))),na.rm=TRUE))
- sum(dataframe$time_hr, na.rm=TRUE))/sum(dataframe$time_hr, na.rm=TRUE),2), "%"))
}
print("Done")
return(dataframe)
}
df = bin_speeds(df,6,1,test = FALSE)
# Calculate the speed bins
bin_speeds <- function (dataframe, num_bins, line_number,test = FALSE) {
dataframe = dataframe[lineid == line_number]
dummy_cols = c(paste0("speed_bin_",1:num_bins,"_dummy","_",line_number))
bin_time_cols = c(paste0("speed_bin_",1:num_bins,"_time_hr","_",line_number))
print("Reading speed bins")
SPEED_CUTS = paste0("SPEED_CUTS_",line_number)
cutpoints = SPEED_CUTS
print(round(cutpoints,2))
for(n in seq(1, num_bins)) {
if(n == 1){
dataframe[, dummy_cols[n] := sapply(speed_mph,  function(x) ifelse (x < cutpoints[n+1], 1, 0))]
}
else if (n == num_bins){
dataframe[, dummy_cols[n] := sapply(speed_mph,  function(x) ifelse (x >= cutpoints[num_bins], 1, 0))]
}
else {
dataframe[, dummy_cols[n] := sapply(speed_mph,  function(x) ifelse (x >= cutpoints[n] & x < cutpoints[n + 1], 1, 0))]
}
}
dataframe[, (bin_time_cols) := lapply(.SD, function(x) x * dataframe$time_hr ), .SDcols = dummy_cols]
if (test) {
print(paste0("Percentage error of summed speed bin times = ",
round(100*(sum(colSums(dataframe %>% select(starts_with("speed_bin_") & ends_with(paste0("_time_hr","_",line_number))),na.rm=TRUE))
- sum(dataframe$time_hr, na.rm=TRUE))/sum(dataframe$time_hr, na.rm=TRUE),2), "%"))
}
print("Done")
return(dataframe)
}
df = bin_speeds(df,6,1,test = FALSE)
SPEED_CUTS_1 = read.csv(paste0("F:/data/tidy/speed-19-cutpoints-line-specific-bins-", NUM_SPEED_BINS, "-1", ".csv"))$cutpoints
SPEED_CUTS_2 = read.csv(paste0("F:/data/tidy/speed-19-cutpoints-line-specific-bins-", NUM_SPEED_BINS, "-2", ".csv"))$cutpoints
SPEED_CUTS_3 = read.csv(paste0("F:/data/tidy/speed-19-cutpoints-line-specific-bins-", NUM_SPEED_BINS, "-3", ".csv"))$cutpoints
SPEED_CUTS_4 = read.csv(paste0("F:/data/tidy/speed-19-cutpoints-line-specific-bins-", NUM_SPEED_BINS, "-4", ".csv"))$cutpoints
ACCEL_CUTS_1 = read.csv(paste0("F:/data/tidy/acceleration-19-cutpoints-line-specific-bins-", NUM_ACCEL_BINS, "-1", ".csv"))$cutpoints
ACCEL_CUTS_2 = read.csv(paste0("F:/data/tidy/acceleration-19-cutpoints-line-specific-bins-", NUM_ACCEL_BINS, "-2", ".csv"))$cutpoints
ACCEL_CUTS_3 = read.csv(paste0("F:/data/tidy/acceleration-19-cutpoints-line-specific-bins-", NUM_ACCEL_BINS, "-3", ".csv"))$cutpoints
ACCEL_CUTS_4 = read.csv(paste0("F:/data/tidy/acceleration-19-cutpoints-line-specific-bins-", NUM_ACCEL_BINS, "-4", ".csv"))$cutpoints
print(SPEED_CUTS_1)
bin_speeds <- function (dataframe, num_bins, line_number,test = FALSE) {
dataframe = dataframe[lineid == line_number]
dummy_cols = c(paste0("speed_bin_",1:num_bins,"_dummy","_",line_number))
bin_time_cols = c(paste0("speed_bin_",1:num_bins,"_time_hr","_",line_number))
print("Reading speed bins")
SPEED_CUTS = paste0("SPEED_CUTS_",line_number)
cutpoints = list(SPEED_CUTS)
print(round(cutpoints,2))
for(n in seq(1, num_bins)) {
if(n == 1){
dataframe[, dummy_cols[n] := sapply(speed_mph,  function(x) ifelse (x < cutpoints[n+1], 1, 0))]
}
else if (n == num_bins){
dataframe[, dummy_cols[n] := sapply(speed_mph,  function(x) ifelse (x >= cutpoints[num_bins], 1, 0))]
}
else {
dataframe[, dummy_cols[n] := sapply(speed_mph,  function(x) ifelse (x >= cutpoints[n] & x < cutpoints[n + 1], 1, 0))]
}
}
dataframe[, (bin_time_cols) := lapply(.SD, function(x) x * dataframe$time_hr ), .SDcols = dummy_cols]
if (test) {
print(paste0("Percentage error of summed speed bin times = ",
round(100*(sum(colSums(dataframe %>% select(starts_with("speed_bin_") & ends_with(paste0("_time_hr","_",line_number))),na.rm=TRUE))
- sum(dataframe$time_hr, na.rm=TRUE))/sum(dataframe$time_hr, na.rm=TRUE),2), "%"))
}
print("Done")
return(dataframe)
}
df = bin_speeds(df,6,1,test = FALSE)
bin_speeds <- function (dataframe, num_bins, line_number,test = FALSE) {
datbinaframe = dataframe[lineid == line_number]
dummy_cols = c(paste0("speed_bin_",1:num_bins,"_dummy","_",line_number))
bin_time_cols = c(paste0("speed_bin_",1:num_bins,"_time_hr","_",line_number))
print("Reading speed bins")
SPEED_CUTS = paste0("SPEED_CUTS_",line_number)
cutpoints = SPEED_CUTS
print(cutpoints)
print(round(cutpoints,2))
for(n in seq(1, num_bins)) {
if(n == 1){
dataframe[, dummy_cols[n] := sapply(speed_mph,  function(x) ifelse (x < cutpoints[n+1], 1, 0))]
}
else if (n == num_bins){
dataframe[, dummy_cols[n] := sapply(speed_mph,  function(x) ifelse (x >= cutpoints[num_bins], 1, 0))]
}
else {
dataframe[, dummy_cols[n] := sapply(speed_mph,  function(x) ifelse (x >= cutpoints[n] & x < cutpoints[n + 1], 1, 0))]
}
}
dataframe[, (bin_time_cols) := lapply(.SD, function(x) x * dataframe$time_hr ), .SDcols = dummy_cols]
if (test) {
print(paste0("Percentage error of summed speed bin times = ",
round(100*(sum(colSums(dataframe %>% select(starts_with("speed_bin_") & ends_with(paste0("_time_hr","_",line_number))),na.rm=TRUE))
- sum(dataframe$time_hr, na.rm=TRUE))/sum(dataframe$time_hr, na.rm=TRUE),2), "%"))
}
print("Done")
return(dataframe)
}
df = bin_speeds(df,6,1,test = FALSE)
bin_speeds <- function (dataframe, num_bins, line_number,test = FALSE) {
datbinaframe = dataframe[lineid == line_number]
dummy_cols = c(paste0("speed_bin_",1:num_bins,"_dummy","_",line_number))
bin_time_cols = c(paste0("speed_bin_",1:num_bins,"_time_hr","_",line_number))
print("Reading speed bins")
cutpoints = get(paste0("SPEED_CUTS_",line_number))
print(cutpoints)
print(round(cutpoints,2))
for(n in seq(1, num_bins)) {
if(n == 1){
dataframe[, dummy_cols[n] := sapply(speed_mph,  function(x) ifelse (x < cutpoints[n+1], 1, 0))]
}
else if (n == num_bins){
dataframe[, dummy_cols[n] := sapply(speed_mph,  function(x) ifelse (x >= cutpoints[num_bins], 1, 0))]
}
else {
dataframe[, dummy_cols[n] := sapply(speed_mph,  function(x) ifelse (x >= cutpoints[n] & x < cutpoints[n + 1], 1, 0))]
}
}
dataframe[, (bin_time_cols) := lapply(.SD, function(x) x * dataframe$time_hr ), .SDcols = dummy_cols]
if (test) {
print(paste0("Percentage error of summed speed bin times = ",
round(100*(sum(colSums(dataframe %>% select(starts_with("speed_bin_") & ends_with(paste0("_time_hr","_",line_number))),na.rm=TRUE))
- sum(dataframe$time_hr, na.rm=TRUE))/sum(dataframe$time_hr, na.rm=TRUE),2), "%"))
}
print("Done")
return(dataframe)
}
df = bin_speeds(df,6,1,test = FALSE)
View(df)
head(df)
bin_speeds <- function (dataframe, num_bins, line_number,test = FALSE) {
dataframe = dataframe[lineid == line_number]
dummy_cols = c(paste0("speed_bin_",1:num_bins,"_dummy","_",line_number))
bin_time_cols = c(paste0("speed_bin_",1:num_bins,"_time_hr","_",line_number))
print("Reading speed bins")
cutpoints = get(paste0("SPEED_CUTS_",line_number))
print(cutpoints)
print(round(cutpoints,2))
for(n in seq(1, num_bins)) {
if(n == 1){
dataframe[, dummy_cols[n] := sapply(speed_mph,  function(x) ifelse (x < cutpoints[n+1], 1, 0))]
}
else if (n == num_bins){
dataframe[, dummy_cols[n] := sapply(speed_mph,  function(x) ifelse (x >= cutpoints[num_bins], 1, 0))]
}
else {
dataframe[, dummy_cols[n] := sapply(speed_mph,  function(x) ifelse (x >= cutpoints[n] & x < cutpoints[n + 1], 1, 0))]
}
}
dataframe[, (bin_time_cols) := lapply(.SD, function(x) x * dataframe$time_hr ), .SDcols = dummy_cols]
if (test) {
print(paste0("Percentage error of summed speed bin times = ",
round(100*(sum(colSums(dataframe %>% select(starts_with("speed_bin_") & ends_with(paste0("_time_hr","_",line_number))),na.rm=TRUE))
- sum(dataframe$time_hr, na.rm=TRUE))/sum(dataframe$time_hr, na.rm=TRUE),2), "%"))
}
print("Done")
return(dataframe)
}
df = bin_speeds(df,6,1,test = FALSE)
head(df)
bin_accelerations <- function (dataframe, num_bins,line_number,test = FALSE) {
dummy_cols = c(paste0("accel_bin_",1:num_bins,"_dummy","_",line_number))
bin_time_cols = c(paste0("accel_bin_",1:num_bins,"_time_hr","_",line_number))
print("Reading acceleration bins")
cutpoints = get(paste0("SPEED_CUTS_",line_number))
print(round(cutpoints,2))
for(n in seq(1, num_bins)) {
if(n == 1){
dataframe[, dummy_cols[n] := sapply(accel_mps2,  function(x) ifelse (x < cutpoints[n+1], 1, 0))]
}
else if (n == num_bins){
dataframe[, dummy_cols[n] := sapply(accel_mps2,  function(x) ifelse (x >= cutpoints[num_bins], 1, 0))]
}
else {
dataframe[, dummy_cols[n] := sapply(accel_mps2,  function(x) ifelse (x >= cutpoints[n] & x < cutpoints[n + 1], 1, 0))]
}
}
dataframe[, (bin_time_cols) := lapply(.SD, function(x) x * dataframe$time_hr ), .SDcols = dummy_cols]
if (test) {
print(paste0("Percentage error of summed acceleration bin times = ",
round(100*(sum(colSums(dataframe %>% select(starts_with("accel_bin_") & ends_with(paste0("_time_hr","_",line_number))),na.rm=TRUE))
- sum(dataframe$time_hr, na.rm=TRUE))/sum(dataframe$time_hr, na.rm=TRUE),2), "%"))
}
print("Done")
return(dataframe)
}
df = bin_accelerations(df,6,1,test = FALSE)
bin_accelerations <- function (dataframe, num_bins,line_number,test = FALSE) {
dummy_cols = c(paste0("accel_bin_",1:num_bins,"_dummy","_",line_number))
bin_time_cols = c(paste0("accel_bin_",1:num_bins,"_time_hr","_",line_number))
print("Reading acceleration bins")
cutpoints = get(paste0("ACCEL_CUTS_",line_number))
print(round(cutpoints,2))
for(n in seq(1, num_bins)) {
if(n == 1){
dataframe[, dummy_cols[n] := sapply(accel_mps2,  function(x) ifelse (x < cutpoints[n+1], 1, 0))]
}
else if (n == num_bins){
dataframe[, dummy_cols[n] := sapply(accel_mps2,  function(x) ifelse (x >= cutpoints[num_bins], 1, 0))]
}
else {
dataframe[, dummy_cols[n] := sapply(accel_mps2,  function(x) ifelse (x >= cutpoints[n] & x < cutpoints[n + 1], 1, 0))]
}
}
dataframe[, (bin_time_cols) := lapply(.SD, function(x) x * dataframe$time_hr ), .SDcols = dummy_cols]
if (test) {
print(paste0("Percentage error of summed acceleration bin times = ",
round(100*(sum(colSums(dataframe %>% select(starts_with("accel_bin_") & ends_with(paste0("_time_hr","_",line_number))),na.rm=TRUE))
- sum(dataframe$time_hr, na.rm=TRUE))/sum(dataframe$time_hr, na.rm=TRUE),2), "%"))
}
print("Done")
return(dataframe)
}
df = bin_accelerations(df,6,1,test = FALSE)
head(df)
bin_interaction_terms = function(df, num_speed_bins, num_accel_bins, line_number){
print("Computing speed-acceleration interaction times")
dummy_interaction_cols = c()
for (i in seq(1, num_speed_bins)){
speed_dummy = paste0("speed_bin_", i, "_dummy","_",line_number)
for (j in seq(1, num_accel_bins)){
# add interaction dummy variables
accel_dummy = paste0("accel_bin_", j, "_dummy","_",line_number)
dummy_interaction_col = paste0("speed_bin_", i, "_", "accel_bin_", j,"_",line_number)
dummy_interaction_cols = c(dummy_interaction_cols, dummy_interaction_col) #update list of interaction columns
set(df, j = dummy_interaction_col, value = df[[speed_dummy]]*df[[accel_dummy]])
}
}
df[, paste0(dummy_interaction_cols, "_time_hr","_",line_number) := lapply(.SD, function(x) x * df$time_hr ), .SDcols = dummy_interaction_cols]
print("Done")
return(df)
}
df = bin_interaction_terms(df, 6, 6, 1)
head(df)
bin_interaction_terms = function(df, num_speed_bins, num_accel_bins, line_number){
print("Computing speed-acceleration interaction times")
dummy_interaction_cols = c()
for (i in seq(1, num_speed_bins)){
speed_dummy = paste0("speed_bin_", i, "_dummy","_",line_number)
for (j in seq(1, num_accel_bins)){
# add interaction dummy variables
accel_dummy = paste0("accel_bin_", j, "_dummy","_",line_number)
dummy_interaction_col = paste0("speed_bin_", i, "_", "accel_bin_", j,"_",line_number)
dummy_interaction_cols = c(dummy_interaction_cols, dummy_interaction_col) #update list of interaction columns
set(df, j = dummy_interaction_col, value = df[[speed_dummy]]*df[[accel_dummy]])
}
}
df[, paste0(dummy_interaction_cols, "_time_hr") := lapply(.SD, function(x) x * df$time_hr ), .SDcols = dummy_interaction_cols]
print("Done")
return(df)
}
df = bin_interaction_terms(df, 6, 6, 1)
head(df)
# Aggregate dataframe at hour level
hour_aggregate <- function (dt, num_speed_bins, num_accel_bins, line_number) {
print("Aggregating observations by hour")
#dt = data.table(dt)
dt$month = as.character(dt$month)
dt$hour = as.character(dt$hour)
dt$day = as.character(dt$day)
# create another data table to summarize the number of trains running in each hour
d_num_trains <- dt[, c("month",'hour',"day","lineid","vehicleid")]
agg_d_num_trains = d_num_trains[, .(count = length(unique(vehicleid))), by = .(month,day,hour,lineid)]
agg_d_num_trains_wide = spread(agg_d_num_trains, lineid,count)
# interaction term name preparation for aggregating by hour
speed_name = paste0("speed_bin_", 1:num_speed_bins)
accel_name = paste0("_","accel_bin_", 1:num_accel_bins,"_",line_number,"_time_hr")
interaction_name = outer(speed_name,accel_name, paste, sep="")
# aggregate by hour
sum_cols = c("distance_mile","time_hr",paste0("speed_bin_",1:num_speed_bins,"_time_hr","_",line_number), paste0("accel_bin_", 1:num_accel_bins,"_time_hr","_",line_number), interaction_name)
agg_dt = dt[, lapply( .SD, sum , na.rm=TRUE), by = c("year","month",'hour',"day"), .SDcols = sum_cols]
avg_interval_speed_mph_dt = dt[, lapply( .SD, mean , na.rm=TRUE), by = c("year","month","hour","day"), .SDcols = 'speed_mph']
agg_dt[, 'avg_interval_speed_mph'] = avg_interval_speed_mph_dt$speed_mph
agg_dt[, 'avg_hour_speed_mph'] = agg_dt$distance_mile/agg_dt$time_hr
merged_agg_dt = merge(agg_d_num_trains_wide, agg_dt, all=T)
remove(dt)
remove(agg_d_num_trains_wide)
remove(agg_dt)
return(merged_agg_dt)
}
df = hour_aggregate(df, 6, 6, 1)
View(df)
View(df)
source('D:/Github/treem/bin/R/variable-binning-aggregation-line-specific.R', echo=TRUE)
