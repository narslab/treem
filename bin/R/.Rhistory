}
dataframe[, (bin_time_cols) := lapply(.SD, function(x) x * dataframe$time_hr ), .SDcols = dummy_cols]
if (test) {
print(paste0("Percentage error of summed speed bin times = ",
round(100*(sum(colSums(dataframe %>% select(starts_with("speed_bin_") & ends_with(paste0("_time_hr","_",line_number))),na.rm=TRUE))
- sum(dataframe$time_hr, na.rm=TRUE))/sum(dataframe$time_hr, na.rm=TRUE),2), "%"))
}
print("Done")
return(dataframe)
}
df = bin_speeds(df,6,1,test = FALSE)
# Calculate the speed bins
bin_speeds <- function (dataframe, num_bins, line_number,test = FALSE) {
dataframe = dataframe[lineid == line_number]
dummy_cols = c(paste0("speed_bin_",1:num_bins,"_dummy","_",line_number))
bin_time_cols = c(paste0("speed_bin_",1:num_bins,"_time_hr","_",line_number))
print("Reading speed bins")
SPEED_CUTS = paste0("SPEED_CUTS_",line_number)
cutpoints = SPEED_CUTS
print(round(cutpoints,2))
for(n in seq(1, num_bins)) {
if(n == 1){
dataframe[, dummy_cols[n] := sapply(speed_mph,  function(x) ifelse (x < cutpoints[n+1], 1, 0))]
}
else if (n == num_bins){
dataframe[, dummy_cols[n] := sapply(speed_mph,  function(x) ifelse (x >= cutpoints[num_bins], 1, 0))]
}
else {
dataframe[, dummy_cols[n] := sapply(speed_mph,  function(x) ifelse (x >= cutpoints[n] & x < cutpoints[n + 1], 1, 0))]
}
}
dataframe[, (bin_time_cols) := lapply(.SD, function(x) x * dataframe$time_hr ), .SDcols = dummy_cols]
if (test) {
print(paste0("Percentage error of summed speed bin times = ",
round(100*(sum(colSums(dataframe %>% select(starts_with("speed_bin_") & ends_with(paste0("_time_hr","_",line_number))),na.rm=TRUE))
- sum(dataframe$time_hr, na.rm=TRUE))/sum(dataframe$time_hr, na.rm=TRUE),2), "%"))
}
print("Done")
return(dataframe)
}
df = bin_speeds(df,6,1,test = FALSE)
SPEED_CUTS_1 = read.csv(paste0("F:/data/tidy/speed-19-cutpoints-line-specific-bins-", NUM_SPEED_BINS, "-1", ".csv"))$cutpoints
SPEED_CUTS_2 = read.csv(paste0("F:/data/tidy/speed-19-cutpoints-line-specific-bins-", NUM_SPEED_BINS, "-2", ".csv"))$cutpoints
SPEED_CUTS_3 = read.csv(paste0("F:/data/tidy/speed-19-cutpoints-line-specific-bins-", NUM_SPEED_BINS, "-3", ".csv"))$cutpoints
SPEED_CUTS_4 = read.csv(paste0("F:/data/tidy/speed-19-cutpoints-line-specific-bins-", NUM_SPEED_BINS, "-4", ".csv"))$cutpoints
ACCEL_CUTS_1 = read.csv(paste0("F:/data/tidy/acceleration-19-cutpoints-line-specific-bins-", NUM_ACCEL_BINS, "-1", ".csv"))$cutpoints
ACCEL_CUTS_2 = read.csv(paste0("F:/data/tidy/acceleration-19-cutpoints-line-specific-bins-", NUM_ACCEL_BINS, "-2", ".csv"))$cutpoints
ACCEL_CUTS_3 = read.csv(paste0("F:/data/tidy/acceleration-19-cutpoints-line-specific-bins-", NUM_ACCEL_BINS, "-3", ".csv"))$cutpoints
ACCEL_CUTS_4 = read.csv(paste0("F:/data/tidy/acceleration-19-cutpoints-line-specific-bins-", NUM_ACCEL_BINS, "-4", ".csv"))$cutpoints
print(SPEED_CUTS_1)
bin_speeds <- function (dataframe, num_bins, line_number,test = FALSE) {
dataframe = dataframe[lineid == line_number]
dummy_cols = c(paste0("speed_bin_",1:num_bins,"_dummy","_",line_number))
bin_time_cols = c(paste0("speed_bin_",1:num_bins,"_time_hr","_",line_number))
print("Reading speed bins")
SPEED_CUTS = paste0("SPEED_CUTS_",line_number)
cutpoints = list(SPEED_CUTS)
print(round(cutpoints,2))
for(n in seq(1, num_bins)) {
if(n == 1){
dataframe[, dummy_cols[n] := sapply(speed_mph,  function(x) ifelse (x < cutpoints[n+1], 1, 0))]
}
else if (n == num_bins){
dataframe[, dummy_cols[n] := sapply(speed_mph,  function(x) ifelse (x >= cutpoints[num_bins], 1, 0))]
}
else {
dataframe[, dummy_cols[n] := sapply(speed_mph,  function(x) ifelse (x >= cutpoints[n] & x < cutpoints[n + 1], 1, 0))]
}
}
dataframe[, (bin_time_cols) := lapply(.SD, function(x) x * dataframe$time_hr ), .SDcols = dummy_cols]
if (test) {
print(paste0("Percentage error of summed speed bin times = ",
round(100*(sum(colSums(dataframe %>% select(starts_with("speed_bin_") & ends_with(paste0("_time_hr","_",line_number))),na.rm=TRUE))
- sum(dataframe$time_hr, na.rm=TRUE))/sum(dataframe$time_hr, na.rm=TRUE),2), "%"))
}
print("Done")
return(dataframe)
}
df = bin_speeds(df,6,1,test = FALSE)
bin_speeds <- function (dataframe, num_bins, line_number,test = FALSE) {
datbinaframe = dataframe[lineid == line_number]
dummy_cols = c(paste0("speed_bin_",1:num_bins,"_dummy","_",line_number))
bin_time_cols = c(paste0("speed_bin_",1:num_bins,"_time_hr","_",line_number))
print("Reading speed bins")
SPEED_CUTS = paste0("SPEED_CUTS_",line_number)
cutpoints = SPEED_CUTS
print(cutpoints)
print(round(cutpoints,2))
for(n in seq(1, num_bins)) {
if(n == 1){
dataframe[, dummy_cols[n] := sapply(speed_mph,  function(x) ifelse (x < cutpoints[n+1], 1, 0))]
}
else if (n == num_bins){
dataframe[, dummy_cols[n] := sapply(speed_mph,  function(x) ifelse (x >= cutpoints[num_bins], 1, 0))]
}
else {
dataframe[, dummy_cols[n] := sapply(speed_mph,  function(x) ifelse (x >= cutpoints[n] & x < cutpoints[n + 1], 1, 0))]
}
}
dataframe[, (bin_time_cols) := lapply(.SD, function(x) x * dataframe$time_hr ), .SDcols = dummy_cols]
if (test) {
print(paste0("Percentage error of summed speed bin times = ",
round(100*(sum(colSums(dataframe %>% select(starts_with("speed_bin_") & ends_with(paste0("_time_hr","_",line_number))),na.rm=TRUE))
- sum(dataframe$time_hr, na.rm=TRUE))/sum(dataframe$time_hr, na.rm=TRUE),2), "%"))
}
print("Done")
return(dataframe)
}
df = bin_speeds(df,6,1,test = FALSE)
bin_speeds <- function (dataframe, num_bins, line_number,test = FALSE) {
datbinaframe = dataframe[lineid == line_number]
dummy_cols = c(paste0("speed_bin_",1:num_bins,"_dummy","_",line_number))
bin_time_cols = c(paste0("speed_bin_",1:num_bins,"_time_hr","_",line_number))
print("Reading speed bins")
cutpoints = get(paste0("SPEED_CUTS_",line_number))
print(cutpoints)
print(round(cutpoints,2))
for(n in seq(1, num_bins)) {
if(n == 1){
dataframe[, dummy_cols[n] := sapply(speed_mph,  function(x) ifelse (x < cutpoints[n+1], 1, 0))]
}
else if (n == num_bins){
dataframe[, dummy_cols[n] := sapply(speed_mph,  function(x) ifelse (x >= cutpoints[num_bins], 1, 0))]
}
else {
dataframe[, dummy_cols[n] := sapply(speed_mph,  function(x) ifelse (x >= cutpoints[n] & x < cutpoints[n + 1], 1, 0))]
}
}
dataframe[, (bin_time_cols) := lapply(.SD, function(x) x * dataframe$time_hr ), .SDcols = dummy_cols]
if (test) {
print(paste0("Percentage error of summed speed bin times = ",
round(100*(sum(colSums(dataframe %>% select(starts_with("speed_bin_") & ends_with(paste0("_time_hr","_",line_number))),na.rm=TRUE))
- sum(dataframe$time_hr, na.rm=TRUE))/sum(dataframe$time_hr, na.rm=TRUE),2), "%"))
}
print("Done")
return(dataframe)
}
df = bin_speeds(df,6,1,test = FALSE)
View(df)
head(df)
bin_speeds <- function (dataframe, num_bins, line_number,test = FALSE) {
dataframe = dataframe[lineid == line_number]
dummy_cols = c(paste0("speed_bin_",1:num_bins,"_dummy","_",line_number))
bin_time_cols = c(paste0("speed_bin_",1:num_bins,"_time_hr","_",line_number))
print("Reading speed bins")
cutpoints = get(paste0("SPEED_CUTS_",line_number))
print(cutpoints)
print(round(cutpoints,2))
for(n in seq(1, num_bins)) {
if(n == 1){
dataframe[, dummy_cols[n] := sapply(speed_mph,  function(x) ifelse (x < cutpoints[n+1], 1, 0))]
}
else if (n == num_bins){
dataframe[, dummy_cols[n] := sapply(speed_mph,  function(x) ifelse (x >= cutpoints[num_bins], 1, 0))]
}
else {
dataframe[, dummy_cols[n] := sapply(speed_mph,  function(x) ifelse (x >= cutpoints[n] & x < cutpoints[n + 1], 1, 0))]
}
}
dataframe[, (bin_time_cols) := lapply(.SD, function(x) x * dataframe$time_hr ), .SDcols = dummy_cols]
if (test) {
print(paste0("Percentage error of summed speed bin times = ",
round(100*(sum(colSums(dataframe %>% select(starts_with("speed_bin_") & ends_with(paste0("_time_hr","_",line_number))),na.rm=TRUE))
- sum(dataframe$time_hr, na.rm=TRUE))/sum(dataframe$time_hr, na.rm=TRUE),2), "%"))
}
print("Done")
return(dataframe)
}
df = bin_speeds(df,6,1,test = FALSE)
head(df)
bin_accelerations <- function (dataframe, num_bins,line_number,test = FALSE) {
dummy_cols = c(paste0("accel_bin_",1:num_bins,"_dummy","_",line_number))
bin_time_cols = c(paste0("accel_bin_",1:num_bins,"_time_hr","_",line_number))
print("Reading acceleration bins")
cutpoints = get(paste0("SPEED_CUTS_",line_number))
print(round(cutpoints,2))
for(n in seq(1, num_bins)) {
if(n == 1){
dataframe[, dummy_cols[n] := sapply(accel_mps2,  function(x) ifelse (x < cutpoints[n+1], 1, 0))]
}
else if (n == num_bins){
dataframe[, dummy_cols[n] := sapply(accel_mps2,  function(x) ifelse (x >= cutpoints[num_bins], 1, 0))]
}
else {
dataframe[, dummy_cols[n] := sapply(accel_mps2,  function(x) ifelse (x >= cutpoints[n] & x < cutpoints[n + 1], 1, 0))]
}
}
dataframe[, (bin_time_cols) := lapply(.SD, function(x) x * dataframe$time_hr ), .SDcols = dummy_cols]
if (test) {
print(paste0("Percentage error of summed acceleration bin times = ",
round(100*(sum(colSums(dataframe %>% select(starts_with("accel_bin_") & ends_with(paste0("_time_hr","_",line_number))),na.rm=TRUE))
- sum(dataframe$time_hr, na.rm=TRUE))/sum(dataframe$time_hr, na.rm=TRUE),2), "%"))
}
print("Done")
return(dataframe)
}
df = bin_accelerations(df,6,1,test = FALSE)
bin_accelerations <- function (dataframe, num_bins,line_number,test = FALSE) {
dummy_cols = c(paste0("accel_bin_",1:num_bins,"_dummy","_",line_number))
bin_time_cols = c(paste0("accel_bin_",1:num_bins,"_time_hr","_",line_number))
print("Reading acceleration bins")
cutpoints = get(paste0("ACCEL_CUTS_",line_number))
print(round(cutpoints,2))
for(n in seq(1, num_bins)) {
if(n == 1){
dataframe[, dummy_cols[n] := sapply(accel_mps2,  function(x) ifelse (x < cutpoints[n+1], 1, 0))]
}
else if (n == num_bins){
dataframe[, dummy_cols[n] := sapply(accel_mps2,  function(x) ifelse (x >= cutpoints[num_bins], 1, 0))]
}
else {
dataframe[, dummy_cols[n] := sapply(accel_mps2,  function(x) ifelse (x >= cutpoints[n] & x < cutpoints[n + 1], 1, 0))]
}
}
dataframe[, (bin_time_cols) := lapply(.SD, function(x) x * dataframe$time_hr ), .SDcols = dummy_cols]
if (test) {
print(paste0("Percentage error of summed acceleration bin times = ",
round(100*(sum(colSums(dataframe %>% select(starts_with("accel_bin_") & ends_with(paste0("_time_hr","_",line_number))),na.rm=TRUE))
- sum(dataframe$time_hr, na.rm=TRUE))/sum(dataframe$time_hr, na.rm=TRUE),2), "%"))
}
print("Done")
return(dataframe)
}
df = bin_accelerations(df,6,1,test = FALSE)
head(df)
bin_interaction_terms = function(df, num_speed_bins, num_accel_bins, line_number){
print("Computing speed-acceleration interaction times")
dummy_interaction_cols = c()
for (i in seq(1, num_speed_bins)){
speed_dummy = paste0("speed_bin_", i, "_dummy","_",line_number)
for (j in seq(1, num_accel_bins)){
# add interaction dummy variables
accel_dummy = paste0("accel_bin_", j, "_dummy","_",line_number)
dummy_interaction_col = paste0("speed_bin_", i, "_", "accel_bin_", j,"_",line_number)
dummy_interaction_cols = c(dummy_interaction_cols, dummy_interaction_col) #update list of interaction columns
set(df, j = dummy_interaction_col, value = df[[speed_dummy]]*df[[accel_dummy]])
}
}
df[, paste0(dummy_interaction_cols, "_time_hr","_",line_number) := lapply(.SD, function(x) x * df$time_hr ), .SDcols = dummy_interaction_cols]
print("Done")
return(df)
}
df = bin_interaction_terms(df, 6, 6, 1)
head(df)
bin_interaction_terms = function(df, num_speed_bins, num_accel_bins, line_number){
print("Computing speed-acceleration interaction times")
dummy_interaction_cols = c()
for (i in seq(1, num_speed_bins)){
speed_dummy = paste0("speed_bin_", i, "_dummy","_",line_number)
for (j in seq(1, num_accel_bins)){
# add interaction dummy variables
accel_dummy = paste0("accel_bin_", j, "_dummy","_",line_number)
dummy_interaction_col = paste0("speed_bin_", i, "_", "accel_bin_", j,"_",line_number)
dummy_interaction_cols = c(dummy_interaction_cols, dummy_interaction_col) #update list of interaction columns
set(df, j = dummy_interaction_col, value = df[[speed_dummy]]*df[[accel_dummy]])
}
}
df[, paste0(dummy_interaction_cols, "_time_hr") := lapply(.SD, function(x) x * df$time_hr ), .SDcols = dummy_interaction_cols]
print("Done")
return(df)
}
df = bin_interaction_terms(df, 6, 6, 1)
head(df)
# Aggregate dataframe at hour level
hour_aggregate <- function (dt, num_speed_bins, num_accel_bins, line_number) {
print("Aggregating observations by hour")
#dt = data.table(dt)
dt$month = as.character(dt$month)
dt$hour = as.character(dt$hour)
dt$day = as.character(dt$day)
# create another data table to summarize the number of trains running in each hour
d_num_trains <- dt[, c("month",'hour',"day","lineid","vehicleid")]
agg_d_num_trains = d_num_trains[, .(count = length(unique(vehicleid))), by = .(month,day,hour,lineid)]
agg_d_num_trains_wide = spread(agg_d_num_trains, lineid,count)
# interaction term name preparation for aggregating by hour
speed_name = paste0("speed_bin_", 1:num_speed_bins)
accel_name = paste0("_","accel_bin_", 1:num_accel_bins,"_",line_number,"_time_hr")
interaction_name = outer(speed_name,accel_name, paste, sep="")
# aggregate by hour
sum_cols = c("distance_mile","time_hr",paste0("speed_bin_",1:num_speed_bins,"_time_hr","_",line_number), paste0("accel_bin_", 1:num_accel_bins,"_time_hr","_",line_number), interaction_name)
agg_dt = dt[, lapply( .SD, sum , na.rm=TRUE), by = c("year","month",'hour',"day"), .SDcols = sum_cols]
avg_interval_speed_mph_dt = dt[, lapply( .SD, mean , na.rm=TRUE), by = c("year","month","hour","day"), .SDcols = 'speed_mph']
agg_dt[, 'avg_interval_speed_mph'] = avg_interval_speed_mph_dt$speed_mph
agg_dt[, 'avg_hour_speed_mph'] = agg_dt$distance_mile/agg_dt$time_hr
merged_agg_dt = merge(agg_d_num_trains_wide, agg_dt, all=T)
remove(dt)
remove(agg_d_num_trains_wide)
remove(agg_dt)
return(merged_agg_dt)
}
df = hour_aggregate(df, 6, 6, 1)
View(df)
View(df)
source('D:/Github/treem/bin/R/variable-binning-aggregation-line-specific.R', echo=TRUE)
source('D:/Github/treem/bin/R/variable-binning-aggregation-line-specific.R', echo=TRUE)
source('D:/Github/treem/bin/R/variable-binning-aggregation-line-specific.R', echo=TRUE)
source('D:/Github/treem/bin/R/variable-binning-aggregation-line-specific.R', echo=TRUE)
source('D:/Github/treem/bin/R/variable-binning-aggregation-line-specific.R', echo=TRUE)
source('D:/Github/treem/bin/R/variable-binning-aggregation-line-specific.R', echo=TRUE)
source('D:/Github/treem/bin/R/variable-binning-aggregation-line-specific.R', echo=TRUE)
source('D:/Github/treem/bin/R/energy-system-model-line-specific.r', echo=TRUE)
View(error_df_results)
# dev.off()
#
# random_forest = function(split,num_trees){
# #     df = data.table("mtry" = c(18,25,32,40),"OOB error"= as.numeric(),"Train error"= as.numeric())
# #     seq = c(18,25,32,40)
# #     mtry <- tuneRF(dfh_train[,..list1],dfh_train$energy_MWh, ntreeTry=500,
# #                stepFactor=1.5,improve=0.01, trace=TRUE, plot=TRUE)
# #    best.m <- mtry[mtry[, 2] == min(mtry[, 2]), 1]
# #    print(mtry)
# #    print(best.m)
Random_forest_energy <- randomForest(reformulate(x_list,"energy_MWh"), data = dfh_train, mtry= 100, ntree = 500, na.omit = TRUE)
varImpPlot(Random_forest_energy , main = "variable importance")
#    hist(treesize(Random_forest_energy))
#    return(Random_forest_energy)
# }
#
# RF = random_forestï¼140ï¼500ï¼
#
# RF$err.rate[,1]
#
# dfh_test[is.na(dfh_test)] <- 0
#
RF_importance = data.frame(Random_forest_energy$importance)
RF_importance$ID = rownames(RF_importance)
View(RF_importance)
RF_importance = RF_importance[order(RF_importance$IncNodePurity,decreasing=TRUE,na.last=FALSE),]
RF_importance = RF_importance[7:17,]
pred <- predict(RF, newdata = dfh_test,na.action = pass)
pred <- predict(Random_forest_energy, newdata = dfh_test,na.action = pass)
#
print(paste("RMSE:",sqrt(mean((dfh_test$energy_MWh - pred)^2,na.rm = TRUE))))
print(paste("MAPE:",mean(abs((dfh_test$energy_MWh - pred)/dfh_test$energy_MWh),na.rm =TRUE) * 100))
# print(paste("MAPE:",mean(abs((test$Observed - test$Predicted)/test$Observed),na.rm =TRUE) * 100))
#
# png("../../figures/RF_importance_line.png",height=6500,width=9600,res=360)
ggplot(RF_importance, aes(IncNodePurity/1000, reorder(ID, IncNodePurity)))+
#xlim(-20,20) +
geom_bar(stat="identity",fill="#1f78b4",width = 0.6) +
theme_bw()+
theme(axis.text=element_text(size = 35),axis.title.x = element_text(size = 40),axis.title.y = element_blank()) +
#scale_color_gradient(low="blue",high = "red") +
labs(x = "Increase in Node Purity (thousand)") +
guides(color = FALSE)
RF_importance
summary(RF_importance)
print(Random_forest_energy)
test_compare = data.frame("Observed" = dfh_test$energy_MWh, "Predicted" = pred, "Residual" =  dfh_test$energy_MWh - pred,
"Hour" = dfh_test$hour,"Year" = dfh_test$year,"Day"  = dfh_test$day,"Month" = dfh_test$month)
test_compare$Date = with(test_compare, ISOdatetime(Year,  Month, Day, Hour, 0, 0))
test_compare_melt = melt(test_compare,id.vars=c("Hour","Year","Day","Month","Date","Residual"),
measure.vars = c("Predicted","Observed"),variable.name = "type",value.name = "value")
#
# # Model performance
# png("../../figures/Random forest_line.png",height=2700,width=8000,res=360)
ggplot(test_compare_melt) +
ylim(20,70) +
geom_line(aes(x = Date, y = value, color = type)
,size = 1,alpha = 0.4) +
geom_point(aes(x = Date , y = value, color = type)
,size = 1, alpha = 0.4) +
#geom_errorbar(aes(x = Date, y = value, ymin = CI_lower, ymax=CI_upper, color = ""), width=.2,
#                  position=position_dodge(0.05)) +
theme_bw() +
theme(axis.text = element_text(size=30), axis.title.x = element_blank(),title = element_text(size=35),
legend.text = element_text(size = 30), legend.title = element_blank(),
axis.title.y = element_blank(),
legend.key.size = unit(3, 'cm'),
panel.grid = element_line(size = 0.9)) +
labs(#title ="Random Forests",
y = "Energy consumption (MWh)", x = "Date") +
scale_x_datetime(date_breaks ="1 month",date_labels = ("%m/%y")) +
scale_color_manual(values=c("#fc8d62", "#8da0cb"))
#    print(Random_forest_energy)
#    # Number of nodes in each tree
#    hist(treesize(Random_forest_energy))
#    return(Random_forest_energy)
# }
#
# RF = random_forestï¼140ï¼500ï¼
#
# RF$err.rate[,1]
#
dfh_test[is.na(dfh_test)] <- 0
pred <- predict(Random_forest_energy, newdata = dfh_test,na.action = pass)
test_compare = data.frame("Observed" = dfh_test$energy_MWh, "Predicted" = pred, "Residual" =  dfh_test$energy_MWh - pred,
"Hour" = dfh_test$hour,"Year" = dfh_test$year,"Day"  = dfh_test$day,"Month" = dfh_test$month)
test_compare$Date = with(test_compare, ISOdatetime(Year,  Month, Day, Hour, 0, 0))
test_compare_melt = melt(test_compare,id.vars=c("Hour","Year","Day","Month","Date","Residual"),
measure.vars = c("Predicted","Observed"),variable.name = "type",value.name = "value")
#
# # Model performance
# png("../../figures/Random forest_line.png",height=2700,width=8000,res=360)
ggplot(test_compare_melt) +
ylim(20,70) +
geom_line(aes(x = Date, y = value, color = type)
,size = 1,alpha = 0.4) +
geom_point(aes(x = Date , y = value, color = type)
,size = 1, alpha = 0.4) +
#geom_errorbar(aes(x = Date, y = value, ymin = CI_lower, ymax=CI_upper, color = ""), width=.2,
#                  position=position_dodge(0.05)) +
theme_bw() +
theme(axis.text = element_text(size=30), axis.title.x = element_blank(),title = element_text(size=35),
legend.text = element_text(size = 30), legend.title = element_blank(),
axis.title.y = element_blank(),
legend.key.size = unit(3, 'cm'),
panel.grid = element_line(size = 0.9)) +
labs(#title ="Random Forests",
y = "Energy consumption (MWh)", x = "Date") +
scale_x_datetime(date_breaks ="1 month",date_labels = ("%m/%y")) +
scale_color_manual(values=c("#fc8d62", "#8da0cb"))
png("../../figures/Random forest_line.png",height=2700,width=8000,res=360)
ggplot(test_compare_melt) +
ylim(20,70) +
geom_line(aes(x = Date, y = value, color = type)
,size = 1,alpha = 0.4) +
geom_point(aes(x = Date , y = value, color = type)
,size = 1, alpha = 0.4) +
#geom_errorbar(aes(x = Date, y = value, ymin = CI_lower, ymax=CI_upper, color = ""), width=.2,
#                  position=position_dodge(0.05)) +
theme_bw() +
theme(axis.text = element_text(size=30), axis.title.x = element_blank(),title = element_text(size=35),
legend.text = element_text(size = 30), legend.title = element_blank(),
axis.title.y = element_blank(),
legend.key.size = unit(3, 'cm'),
panel.grid = element_line(size = 0.9)) +
labs(#title ="Random Forests",
y = "Energy consumption (MWh)", x = "Date") +
scale_x_datetime(date_breaks ="1 month",date_labels = ("%m/%y")) +
scale_color_manual(values=c("#fc8d62", "#8da0cb"))
dev.off()
hist(test_compare$Residual)
ggplot(test_compare) +
geom_histogram(data = test_compare$Residual,fill = "blue",
col= "red")
ggplot(test_compare, aes(Residual)) +
geom_histogram(fill = "blue",col= "red")
ggplot(test_compare, aes(Residual)) +
geom_histogram(fill = "navyblue",col= "red")
ggplot(test_compare, aes(Residual)) +
geom_histogram(fill = "lightblue",col= "darkblue")
mean(test_compare$Residual)
mean(abs(test_compare$Residual))
ggplot(test_compare) +
# ylim(-15,10)+
geom_line(aes(x = Date, y = Residual), color = "red"
,size = 1, alpha = 0.6) +
#geom_errorbar(aes(x = Date, y = value, ymin = CI_lower, ymax=CI_upper, color = ""), width=.2,
#                  position=position_dodge(0.05)) +
theme_bw() +
theme(axis.text = element_text(size=30), axis.title.x = element_blank(),title = element_text(size=35),
legend.text = element_text(size = 30), legend.title = element_blank(),
axis.title.y = element_blank(),
legend.key.size = unit(3, 'cm'),
panel.grid = element_line(size = 0.9)) +
labs(#title ="Random Forests",
y = "Energy consumption (MWh)", x = "Date") +
scale_x_datetime(date_breaks ="1 month",date_labels = ("%m/%y"))
ggplot(test_compare) +
ylim(-15,10)+
geom_line(aes(x = Date, y = Residual), color = "red"
,size = 1, alpha = 0.6) +
#geom_errorbar(aes(x = Date, y = value, ymin = CI_lower, ymax=CI_upper, color = ""), width=.2,
#                  position=position_dodge(0.05)) +
theme_bw() +
theme(axis.text = element_text(size=30), axis.title.x = element_blank(),title = element_text(size=35),
legend.text = element_text(size = 30), legend.title = element_blank(),
axis.title.y = element_blank(),
legend.key.size = unit(3, 'cm'),
panel.grid = element_line(size = 0.9)) +
labs(#title ="Random Forests",
y = "Energy consumption (MWh)", x = "Date") +
scale_x_datetime(date_breaks ="1 month",date_labels = ("%m/%y"))
png("../../figures/Random forest_residual.png",height=2700,width=8000,res=360)
ggplot(test_compare) +
ylim(-15,10)+
geom_line(aes(x = Date, y = Residual), color = "red"
,size = 1, alpha = 0.6) +
#geom_errorbar(aes(x = Date, y = value, ymin = CI_lower, ymax=CI_upper, color = ""), width=.2,
#                  position=position_dodge(0.05)) +
theme_bw() +
theme(axis.text = element_text(size=30), axis.title.x = element_blank(),title = element_text(size=35),
legend.text = element_text(size = 30), legend.title = element_blank(),
axis.title.y = element_blank(),
legend.key.size = unit(3, 'cm'),
panel.grid = element_line(size = 0.9)) +
labs(#title ="Random Forests",
y = "Energy consumption (MWh)", x = "Date") +
scale_x_datetime(date_breaks ="1 month",date_labels = ("%m/%y"))
dev.off()
RF_importance = data.frame(Random_forest_energy$importance)
RF_importance$ID = rownames(RF_importance)
knitr::opts_chunk$set(echo = TRUE)
phi<-matrix(0,10,1)
theta<-matrix(0,10,1)
sigma2<-matrix(0,10,1)
for(i in 1:10){
x<-arima.sim(n=200,list(ar=.9,ma=.2,sd=sqrt(1)))
fit<-arima(x,order=c(1,0,1))
phi[i]<-fit$coef[1]
theta[i]<-fit$coef[2]
sigma2[i]<-fit$sigma2
}
sigma2
library(astsa)
str(arf)
plot(arf)
acf(arf)
pacf(arf)
acf(arf)
pacf(arf)
