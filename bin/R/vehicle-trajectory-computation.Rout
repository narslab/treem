
R version 3.6.2 (2019-12-12) -- "Dark and Stormy Night"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(data.table) #fread
Warning message:
package 'data.table' was built under R version 3.6.3 
> library(dplyr)

Attaching package: 'dplyr'

The following objects are masked from 'package:data.table':

    between, first, last

The following objects are masked from 'package:stats':

    filter, lag

The following objects are masked from 'package:base':

    intersect, setdiff, setequal, union

> library(geosphere) # Calculate vehicle distance
Warning message:
package 'geosphere' was built under R version 3.6.3 
> library(lubridate)# Date column extraction

Attaching package: 'lubridate'

The following objects are masked from 'package:data.table':

    hour, isoweek, mday, minute, month, quarter, second, wday, week,
    yday, year

The following object is masked from 'package:base':

    date

> 
> # adjust the R limit
> memory.limit(size=249200)
[1] 249200
> 
> # Read data from folder
> # Suggestion: Just do one year at one time. One year's table has 94363502 rows(green)
> YEARLIST = c('19')
> MONTHLIST = c('04') #FOR FULL TABLE
> DISTANCE_FILEPATH = "../../data/raw/vehicle-location/"
> 
> # aggregrate_trajectory_table
> aggregate_line_trajectories = function(year, month){
+     assign("dg", fread(paste(DISTANCE_FILEPATH, paste("lightrail", "trajectories", month, year, ".csv", sep = "-", collapse = ""), sep="")))
+     assign("dh", fread(paste(DISTANCE_FILEPATH, paste("heavyrail", "trajectories", month, year, ".csv", sep = "-", collapse = ""), sep="")))
+     # Combine the original tables to a single one for analysis
+     dg = subset(dg, select = c(trxtime, trainid, lineid, lat, lon))
+     dh = subset(dh, select = c(trxtime, trainid, lineid, lat, lon))
+     df = rbind(dg, dh)
+     return(df)
+ }
> 
> # Data preprocessing
> preprocess_data = function(df){
+     # Add time column to do analysis by random time scale
+     df$day = day(df$trxtime)
+     df$month = month(df$trxtime)
+     df$year = year(df$trxtime)
+     # check the na values ratio
+     df_na = df[(is.na(df$lon)) | (is.na(df$lat)),]
+     df_na_rate = nrow(df_na)/nrow(df)
+     print(df_na_rate)
+     # remove the rows with values of lat and lon are 0
+     df = df[!(is.na(df$lon)) | !(is.na(df$lat)),] 
+     df = df[order(df$trainid, df$trxtime),]
+     df = distinct(df, trxtime, trainid, .keep_all = TRUE) # Remove the duplicated time record
+     return(df)
+ }
> 
> # Function to compute distances (D), speeds (S) and acceleration (A) in meters, meters per second, km per hour and m s^-2
> compute_trajectories <- function(d) {
+     d = data.frame(d)
+     d$dist_meters = NA
+     d$dist_meters = as.numeric(d$dist_meters)
+     d$interval_seconds = NA
+     d$interval_seconds = as.numeric(d$interval_seconds)
+     d$speed_mps = NA
+     d$speed_mps = as.numeric(d$speed_mps)
+     d$speed_kph = NA
+     d$speed_kph = as.numeric(d$speed_kph)
+     d$accel_mps2 = NA
+     d$accel_mps2 = as.numeric(d$accel_mps2)
+     n <- nrow(d)
+     diagnostics = {}
+     if (n >= 2) {
+         # Compute interval distance using Haversine function
+         d$dist_meters[2:n] = distHaversine(cbind(d$lon[1:n-1],d$lat[1:n-1]),cbind(d$lon[2:n],d$lat[2:n]))
+         # Compute time interval
+         d$interval_seconds[2:n] = as.numeric(difftime(d$trxtime[2:n], d$trxtime[1:n-1], units = "secs"))
+         # Compute speed in meters per second
+         d$speed_mps[2:n] = d$dist_meters[2:n] / d$interval_seconds[2:n]
+         # Convert speed to kph
+         d$speed_kph[2:n] = d$speed_mps[2:n] * 3.6
+         # Compute accelerations
+         d$accel_mps2[2:n] = (d$speed_mps[2:n] - d$speed_mps[1:n-1])/d$interval_seconds[2:n]
+         # Spurious values statistics
+         index_excessive_speeds = as.numeric(row.names(d[(d$speed_kph > 128) & (!is.na(d$speed_kph)),]))
+         # Original data metrics calculation
+          diagnostics$mean_original_speed_kph = mean(as.numeric(d[, "speed_kph"]),na.rm=TRUE)
+          diagnostics$min_original_speed_kph = min(as.numeric(d[, "speed_kph"]),na.rm=TRUE)
+          diagnostics$max_original_speed_kph = max(as.numeric(d[, "speed_kph"]),na.rm=TRUE)
+          diagnostics$num_original_speed_kph = length(as.numeric(d[, "speed_kph"]))
+         # Excessive data metrics calculation
+          diagnostics$mean_excess_speed_kph = mean(as.numeric(d[index_excessive_speeds, "speed_kph"]))
+          diagnostics$min_excess_speed_kph = min(d[index_excessive_speeds, "speed_kph"]) 
+          diagnostics$max_excess_speed_kph = max(as.numeric(d[index_excessive_speeds, "speed_kph"])) 
+          diagnostics$num_excess_speed_kph = length(d[index_excessive_speeds, "speed_kph"]) 
+          diagnostics$prop_excess_speed_kph = round(100*diagnostics$num_excess_speed/n, 2)
+         # Correct the excessive speed values and recalculate acceleration and distance
+         repeat{
+         d[index_excessive_speeds, c('speed_kph',"speed_mps")] = d[index_excessive_speeds - 1 , c('speed_kph',"speed_mps")]
+         d[index_excessive_speeds, "dist_meters"] = d[index_excessive_speeds, "speed_mps"] * d[index_excessive_speeds,"interval_seconds"]
+         d[index_excessive_speeds, "accel_mps2"] = (d[index_excessive_speeds, "speed_mps"] 
+                                                   - d[index_excessive_speeds - 1, "speed_mps"]) / d[index_excessive_speeds,"interval_seconds"]
+         if(max(d$speed_kph,na.rm = TRUE) <= 128){break}
+         }
+         # Corrected data metrics calculation
+          diagnostics$mean_corrected_speed_kph = mean(as.numeric(d[, "speed_kph"]),na.rm=TRUE)
+          diagnostics$min_corrected_speed_kph = min(as.numeric(d[, "speed_kph"]),na.rm=TRUE)
+          diagnostics$max_corrected_speed_kph = max(as.numeric(d[, "speed_kph"]),na.rm=TRUE)
+          diagnostics$num_corrected_speed_kph = length(as.numeric(d[, "speed_kph"]))
+     }
+     return(list(data = d ,diag_metrics = diagnostics))   
+ }
> 
> # Process calculation 
> process_month_trajectory = function(data){
+     results_df = data.frame() # empty dataframe
+     diagnostics_df = data.frame()
+     for(i in unique(data$day)) { 
+         data_day <- data[data$day == i, ]
+         # Put each train in one loop in a subset
+         for (j in unique(data_day$trainid)) {
+             data_day_train = data_day[data_day$trainid == j, ]        
+             trajectory_and_diagnostics <- compute_trajectories(data_day_train)  
+             trajectories = trajectory_and_diagnostics$data
+             diagnostics = trajectory_and_diagnostics$diag_metrics          
+             results_df <- rbind(results_df, trajectories)
+             diagnostics_df <- rbind(diagnostics_df, diagnostics) 
+         }
+     }
+ #     write.csv(x = results_df, file.path("../../data/tidy/", paste("trajectory", yy, mm, ".csv", sep = "-", collapse = "")))
+ #     write.csv(x = diagnostics_df, file.path("../../data/tidy/", paste("trajectory-diagnostics" , yy, mm, ".csv", sep = "-",collapse = "")))
+     # Uncomment the beneath line and check the computation result
+      return(list(result = results_df, result_diag = diagnostics_df ))
+  }
> 
> # Generate the final table
> main = function(YEARLIST, MONTHLIST) {
+     for (y in YEARLIST) {
+         for (m in MONTHLIST) {
+             df_agg = aggregate_line_trajectories(y, m)
+             df_agg = preprocess_data(df_agg)
+             process_month_trajectory(df_agg, y, m)            
+         }
+     }
+ }
> 
> main(YEARLIST, MONTHLIST)
Error in fread(paste(DISTANCE_FILEPATH, paste("lightrail", "trajectories",  : 
  File '../../data/raw/vehicle-location/lightrail-trajectories-04-19-.csv' does not exist or is non-readable. getwd()=='C:/Users/hanzh'
Calls: main -> aggregate_line_trajectories -> assign -> fread
Execution halted
